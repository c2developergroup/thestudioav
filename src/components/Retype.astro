---
// No es necesario un frontmatter
---

<section id="retype-section" class="flex justify-center text-2xl text-center mt-28">
  <p id="retype-text"><span id="content"></span><span id="cursor">|</span></p>
</section>

<style>
  .blink {
    animation: blink 1s step-start infinite;
  }

  @keyframes blink {
    50% {
      opacity: 0;
    }
  }
</style>

<script>
  if (typeof window !== 'undefined') {
    document.addEventListener("DOMContentLoaded", function() {
      const section = document.getElementById('retype-section')!!;
      const textElement = document.getElementById("content")!!;
      const cursorElement = document.getElementById("cursor")!!;

      const spans = [{
        text: "Te invitamos a ",
        style: {}
      }, {
        text: "vivir con nosotras",
        style: {
          color: "#ee561d"
        }
      }, {
        text: "\n",
        style: {},
        realElement: document.createElement('br'),
      }, {
        text: "las ",
        style: {}
      }, {
        text: "nuevas tendencias",
        style: {
          color: "#ee561d"
        }
      }, {
        text: ", el diseño y",
        style: {}
      }, {
        text: "\n",
        style: {},
        realElement: document.createElement('br'),
      }, {
        text: "la ",
        style: {}
      }, {
        text: "era digital",
        style: {
          color: "#ee561d"
        }
      }, {
        text: " en la esencia de tu marca.",
        style: {}
      }];
      let indexArray = 0;
      let indexText = 0;
      const speed = 100;  // Velocidad de escritura en milisegundos

      function type() {
        console.log(`Typing span[${indexArray}].text[${indexText}]...`);
        const currentSpan = spans[indexArray]!!;
        const currentSpanText = currentSpan.text.slice(0, ++indexText);
        const currentSpanInnerElement = currentSpan.realElement;

        const currentSpanElement = document.createElement('span');
        Object.entries(currentSpan.style as Record<string, string>).forEach(([key, value]) => {
          currentSpanElement.style.setProperty(key, value);
        });

        if (currentSpanInnerElement && indexText == currentSpan.text.length) {
          currentSpanElement.appendChild(currentSpanInnerElement);
        } else {
          currentSpanElement.textContent = currentSpanText;
        }

        if (indexText < currentSpan.text.length) {
          currentSpanElement.id = "--retype-span-current";
          if (indexText == 1)
            textElement.appendChild(currentSpanElement);
          else
            textElement.replaceChild(currentSpanElement, document.getElementById("--retype-span-current")!!);
        } else {
          currentSpanElement.id = `--retype-span-${indexArray}`;
          if (indexText == 1)
            textElement.appendChild(currentSpanElement);
          else
            textElement.replaceChild(currentSpanElement, document.getElementById("--retype-span-current")!!);

          indexArray++;
          indexText = 0;

          if (indexArray >= spans.length) {
            cursorElement.classList.add('blink'); // Añadir clase de titileo cuando termine el efecto
            return;
          }
        }
        setTimeout(type, speed);
      }

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            type();
            observer.unobserve(section); // Deja de observar después de empezar el efecto
          }
        });
      });

      observer.observe(section);
    });
  }
</script>
